// <auto-generated />
using System;
using A_D.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace A_D.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AD.Domain.SampleRaceMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleRace_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleRace_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleRace_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleRace_Id_Standardized");

                    b.ToTable("SampleRaceMap");
                });

            modelBuilder.Entity("A_D.Domain.FacilityNoteTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FacilityNoteTheme");
                });

            modelBuilder.Entity("A_D.Domain.Incentive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Sample_Id", "Amount")
                        .IsUnique();

                    b.ToTable("Incentive");
                });

            modelBuilder.Entity("A_D.Domain.InterviewerNoteTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InterviewerNoteTheme");
                });

            modelBuilder.Entity("A_D.Domain.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Consumer_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DriveTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Interviewer_Id_Peer")
                        .HasColumnType("int");

                    b.Property<double?>("Miles")
                        .HasColumnType("float");

                    b.Property<double?>("Payment")
                        .HasColumnType("float");

                    b.Property<bool>("PaymentApproved")
                        .HasColumnType("bit");

                    b.Property<double?>("PeerPayment")
                        .HasColumnType("float");

                    b.Property<bool>("PeerPaymentApproved")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("VerificationSheet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id")
                        .IsUnique();

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("Interviewer_Id_Peer");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("A_D.Domain.Models.Census", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AssistedLivingMedicaidWaiver")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ineligible")
                        .HasColumnType("bit");

                    b.Property<bool>("Invalid")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("RID")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("RepresentativeAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("RepresentativeBlankSurvey")
                        .HasColumnType("bit");

                    b.Property<string>("RepresentativeCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RepresentativeEmail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RepresentativeNameFirst")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RepresentativeNameLast")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RepresentativePhone")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("RepresentativeRefusal")
                        .HasColumnType("bit");

                    b.Property<int>("RepresentativeSurveyBatch_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepresentativeSurveyDateImport")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepresentativeSurveyMethod_Id")
                        .HasColumnType("int");

                    b.Property<bool>("RepresentativeUninvolved")
                        .HasColumnType("bit");

                    b.Property<string>("RepresentativeZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("ResidentDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidentNameFirst")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ResidentNameLast")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RoomOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShortTerm")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("State_Id_Representative")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.HasIndex("RepresentativeSurveyBatch_Id");

                    b.HasIndex("RepresentativeSurveyMethod_Id");

                    b.HasIndex("State_Id_Representative");

                    b.ToTable("Census");
                });

            modelBuilder.Entity("A_D.Domain.Models.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accommodation")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("AddressLine1Mailing")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine1Physical")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2Mailing")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2Physical")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CaseManager")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CaseManagerEmail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CaseManagerPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CityMailing")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CityPhysical")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("ConsentForm")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsentFormGuardian")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateBIRequest")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateBIResponse")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateReturnedLetter")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateVerificationSheet")
                        .HasColumnType("date");

                    b.Property<bool>("DoNotAssign")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNotAssignTargetMet")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneWork")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PlaceOfEmployment")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("SampleAgeGroup_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleAgency_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleCCO_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleEthnicity_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleGender_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleGeography_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleHomeSetting_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleLanguage_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleProgram_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SampleRace_Id")
                        .HasColumnType("int");

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.Property<bool>("SelfDirectedSupports")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SpecialInstruction")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("StateIdentifier")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("State_Id_Mailing")
                        .HasColumnType("int");

                    b.Property<int?>("State_Id_Physical")
                        .HasColumnType("int");

                    b.Property<string>("VRID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ZipCodeMailing")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ZipCodePhysical")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("SampleAgeGroup_Id");

                    b.HasIndex("SampleAgency_Id");

                    b.HasIndex("SampleCCO_Id");

                    b.HasIndex("SampleEthnicity_Id");

                    b.HasIndex("SampleGender_Id");

                    b.HasIndex("SampleGeography_Id");

                    b.HasIndex("SampleHomeSetting_Id");

                    b.HasIndex("SampleLanguage_Id");

                    b.HasIndex("SampleProgram_Id");

                    b.HasIndex("SampleRace_Id");

                    b.HasIndex("State_Id_Mailing");

                    b.HasIndex("State_Id_Physical");

                    b.HasIndex("VRID");

                    b.HasIndex("Sample_Id", "VRID")
                        .IsUnique()
                        .HasFilter("[VRID] IS NOT NULL");

                    b.ToTable("Consumer");
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Consumer_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneWork")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("State_Id")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("State_Id");

                    b.ToTable("ConsumerContact");
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerGuardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Consumer_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneWork")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("State_Id")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id")
                        .IsUnique();

                    b.HasIndex("State_Id");

                    b.ToTable("ConsumerGuardian");
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caller")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Consumer_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateInterviewerNotified")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ConsumerNote");
                });

            modelBuilder.Entity("A_D.Domain.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("State_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("State_Id");

                    b.ToTable("County");
                });

            modelBuilder.Entity("A_D.Domain.Models.DateConflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id", "Date")
                        .IsUnique();

                    b.ToTable("DateConflict");
                });

            modelBuilder.Entity("A_D.Domain.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceModel_Id")
                        .HasColumnType("int");

                    b.Property<int>("DeviceNfieldVersion_Id")
                        .HasColumnType("int");

                    b.Property<int>("DeviceOS_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("VRID")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("DeviceModel_Id")
                        .IsUnique();

                    b.HasIndex("DeviceNfieldVersion_Id")
                        .IsUnique();

                    b.HasIndex("DeviceOS_Id")
                        .IsUnique();

                    b.HasIndex("VRID")
                        .IsUnique()
                        .HasFilter("[VRID] IS NOT NULL");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceDeployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReturn")
                        .HasColumnType("date");

                    b.Property<int>("Device_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Device_Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("DeviceDeployment");
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceModel");
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceNfieldVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceNfieldVersion");
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("Device_Id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Device_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("DeviceNote");
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeviceOS");
                });

            modelBuilder.Entity("A_D.Domain.Models.DocumentFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DocumentFormat");
                });

            modelBuilder.Entity("A_D.Domain.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("County_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("FID")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("County_Id");

                    b.HasIndex("FID")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityConflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int?>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Facility_Id");

                    b.HasIndex("Interviewer_Id", "ProjectQOL_Facility_Id")
                        .IsUnique();

                    b.ToTable("FacilityConflict");
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Administrator")
                        .HasColumnType("bit");

                    b.Property<bool>("CensusCoordinator")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneExtension")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Facility_Id", "Name")
                        .IsUnique();

                    b.ToTable("FacilityContact");
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityDistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<double>("Miles")
                        .HasColumnType("float");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.HasIndex("Interviewer_Id", "ProjectQOL_Facility_Id")
                        .IsUnique();

                    b.ToTable("FacilityDistance");
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityNoteTheme_Id")
                        .HasColumnType("int");

                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("Retain")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityNoteTheme_Id");

                    b.HasIndex("Facility_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("FacilityNote");
                });

            modelBuilder.Entity("A_D.Domain.Models.Interviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NfieldId")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhoneWork")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Recommendation_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("State_Id")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Recommendation_Id");

                    b.HasIndex("State_Id");

                    b.ToTable("Interviewer");
                });

            modelBuilder.Entity("A_D.Domain.Models.InterviewerConflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Interviewer_Id_A")
                        .HasColumnType("int");

                    b.Property<int>("Interviewer_Id_B")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id_B");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.HasIndex("Interviewer_Id_A", "Interviewer_Id_B", "ProjectQOL_Facility_Id")
                        .IsUnique();

                    b.ToTable("InterviewerConflict");
                });

            modelBuilder.Entity("A_D.Domain.Models.InterviewerEmployer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InterviewerEmployer");
                });

            modelBuilder.Entity("A_D.Domain.Models.InterviewerNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterviewerNoteTheme_Id")
                        .HasColumnType("int");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("Retain")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterviewerNoteTheme_Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("InterviewerNote");
                });

            modelBuilder.Entity("A_D.Domain.Models.Interviewer_Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Language_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Language_Id");

                    b.HasIndex("Interviewer_Id", "Language_Id")
                        .IsUnique();

                    b.ToTable("Interviewer_Language");
                });

            modelBuilder.Entity("A_D.Domain.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Language");
                });

            modelBuilder.Entity("A_D.Domain.Models.NotInterviewedQOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<string>("InterviewNumber")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int?>("NotInterviewedCode_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("RID")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<int>("ResultCodeQOLNotInterviewed_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("NotInterviewedCode_Id");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.ToTable("NotInterviewedQOL");
                });

            modelBuilder.Entity("A_D.Domain.Models.NotifyingParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotifyingParty");
                });

            modelBuilder.Entity("A_D.Domain.Models.PSA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PSARegion_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PSARegion_Id", "Name")
                        .IsUnique();

                    b.ToTable("PSA");
                });

            modelBuilder.Entity("A_D.Domain.Models.PSARegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectQOL_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Id", "Name")
                        .IsUnique();

                    b.ToTable("PSARegion");
                });

            modelBuilder.Entity("A_D.Domain.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePHIDelete")
                        .HasColumnType("date");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool>("InterraterAgreement")
                        .HasColumnType("bit");

                    b.Property<int?>("InterviewerEmployer_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("QualityAssurance")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("State_Id")
                        .HasColumnType("int");

                    b.Property<string>("TrainingLocation")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("InterviewerEmployer_Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("State_Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NotifyingParty_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool>("SelfDirectedSupports")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("StateSpecificQuestions")
                        .HasColumnType("bit");

                    b.Property<bool>("WrittenConsent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NotifyingParty_Id");

                    b.HasIndex("Project_Id")
                        .IsUnique();

                    b.ToTable("ProjectNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FamilyData")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkedFacilities")
                        .HasColumnType("bit");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool>("ShortTerm")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Project_Id")
                        .IsUnique();

                    b.ToTable("ProjectQOL");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateContact")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateEmailCensus")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEmailConfirmation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEmailFollowUp")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEmailReminder")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateImportRepresentativeList")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateImportResidentList")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateNonCompliant")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateReceiveRepresentativeList")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateReceiveResidentList")
                        .HasColumnType("date");

                    b.Property<bool>("DoNotSchedule")
                        .HasColumnType("bit");

                    b.Property<int>("DocumentFormat_Id_Representative")
                        .HasColumnType("int");

                    b.Property<int>("DocumentFormat_Id_Resident")
                        .HasColumnType("int");

                    b.Property<int>("Facility_Id")
                        .HasColumnType("int");

                    b.Property<bool>("NoBackupList")
                        .HasColumnType("bit");

                    b.Property<bool>("NonCompliant")
                        .HasColumnType("bit");

                    b.Property<string>("NonCompliantComment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("PSA_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Reminder")
                        .HasColumnType("bit");

                    b.Property<string>("RepresentativeListNote")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("RepresentativeListStatus_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountEligibleEstimate")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountEligibleLongTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountEligibleShortTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountGuardianRefusal")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountIsolation")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountLongTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountPreliminary")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountResidentList")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountResidentListBackup")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentCountShortTerm")
                        .HasColumnType("int");

                    b.Property<bool>("ResidentListComplete")
                        .HasColumnType("bit");

                    b.Property<string>("ResidentListNote")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("ResidentListReturnVisitComplete")
                        .HasColumnType("bit");

                    b.Property<int?>("ResidentSurveyCountActual")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountActualLongTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountActualPrevious")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountActualReportedLongTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountActualReportedShortTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountActualShortTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountGoalEstimate")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountGoalLongTerm")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountGoalReturnVisit")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentSurveyCountGoalShortTerm")
                        .HasColumnType("int");

                    b.Property<string>("ReturnVisitNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReturnVisitReason_Id")
                        .HasColumnType("int");

                    b.Property<bool>("ReturnVisitRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ScheduleNote")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("TestFacility")
                        .HasColumnType("bit");

                    b.Property<bool>("TrainingFacility")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFormat_Id_Representative");

                    b.HasIndex("DocumentFormat_Id_Resident");

                    b.HasIndex("Facility_Id");

                    b.HasIndex("PSA_Id");

                    b.HasIndex("ProjectQOL_Id");

                    b.HasIndex("RepresentativeListStatus_Id");

                    b.HasIndex("ReturnVisitReason_Id");

                    b.ToTable("ProjectQOL_Facility");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilityLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CoSchedule")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectQOL_Facility_Id_A")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id_B")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Facility_Id_B");

                    b.HasIndex("ProjectQOL_Facility_Id_A", "ProjectQOL_Facility_Id_B")
                        .IsUnique();

                    b.ToTable("ProjectQOL_FacilityLink");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilityReschedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateScheduleOriginal")
                        .HasColumnType("date");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<int>("RescheduleReason_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("RescheduleReason_Id");

                    b.HasIndex("ProjectQOL_Facility_Id", "DateScheduleOriginal")
                        .IsUnique();

                    b.ToTable("ProjectQOL_FacilityReschedule");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilitySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("VisitCode_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitCode_Id");

                    b.HasIndex("ProjectQOL_Facility_Id", "VisitCode_Id")
                        .IsUnique();

                    b.ToTable("ProjectQOL_FacilitySchedule");
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilitySchedule_Interviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FacilityOrganizer")
                        .HasColumnType("bit");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_FacilitySchedule_Id")
                        .HasColumnType("int");

                    b.Property<bool>("QAM")
                        .HasColumnType("bit");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("ProjectQOL_FacilitySchedule_Id", "Interviewer_Id")
                        .IsUnique();

                    b.ToTable("ProjectQOL_FacilitySchedule_Interviewer");
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_Interviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateBegin")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateMaterialsIssue")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateMaterialsReturn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Interviewer_Id_Peer")
                        .HasColumnType("int");

                    b.Property<int?>("Interviewer_Id_QAM")
                        .HasColumnType("int");

                    b.Property<bool>("MaterialsCallSheet")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsClipboard")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsConsentForm")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsHearingAmplifier")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsLaminate")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsLockBox")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsNameTag")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsReferenceManual")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsTablet")
                        .HasColumnType("bit");

                    b.Property<bool>("MaterialsTabletAccessories")
                        .HasColumnType("bit");

                    b.Property<int?>("PSA_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool>("QAM")
                        .HasColumnType("bit");

                    b.Property<int?>("Recommendation_Id")
                        .HasColumnType("int");

                    b.Property<int?>("SeparationReason_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Trainer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id_Peer");

                    b.HasIndex("Interviewer_Id_QAM");

                    b.HasIndex("PSA_Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("Recommendation_Id");

                    b.HasIndex("SeparationReason_Id");

                    b.HasIndex("Interviewer_Id", "Project_Id")
                        .IsUnique();

                    b.ToTable("Project_Interviewer");
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Language_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Language_Id");

                    b.HasIndex("Project_Id", "Language_Id")
                        .IsUnique();

                    b.ToTable("Project_Language");
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_User_UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<int>("UserRole_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRole_Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("Project_Id", "User_Id")
                        .IsUnique();

                    b.ToTable("Project_User_UserRole");
                });

            modelBuilder.Entity("A_D.Domain.Models.RefusalReasonNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RefusalReasonNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.RepresentativeListStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RepresentativeListStatus");
                });

            modelBuilder.Entity("A_D.Domain.Models.RepresentativeSurveyBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateMailDoNotCallList")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateMailPhoneList")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateMailPostcardList")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateMailSurveyList")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int>("ProjectQOL_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Id", "Number")
                        .IsUnique();

                    b.ToTable("RepresentativeSurveyBatch");
                });

            modelBuilder.Entity("A_D.Domain.Models.RepresentativeSurveyMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RepresentativeSurveyMethod");
                });

            modelBuilder.Entity("A_D.Domain.Models.RescheduleReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RescheduleReason");
                });

            modelBuilder.Entity("A_D.Domain.Models.RestartQOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdmitDay")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("AdmitMonth")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("AdmitYear")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Assisted")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AssistedBy")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Consent")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int>("IncompleteCode_Id")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("InterviewNumber")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("InterviewTime")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RID")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<int?>("ResultCodeQOLIncomplete_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ResultCodeQOLNotInterviewedId")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TooManyNA")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.HasIndex("ResultCodeQOLIncomplete_Id");

                    b.HasIndex("ResultCodeQOLNotInterviewedId");

                    b.ToTable("RestartQOL");
                });

            modelBuilder.Entity("A_D.Domain.Models.ResultCategoryNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResultCategoryNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.ResultCodeQOLIncomplete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ResultCodeQOLIncomplete");
                });

            modelBuilder.Entity("A_D.Domain.Models.ResultCodeQOLNotInterviewed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Definition")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("ResultCodeQOLNotInterviewed");
                });

            modelBuilder.Entity("A_D.Domain.Models.ResultNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ResultCategoryNCI_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ResultCategoryNCI_Id");

                    b.ToTable("ResultNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.ReturnVisitReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReturnVisitReason");
                });

            modelBuilder.Entity("A_D.Domain.Models.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStatusLog")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSurvey")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVerification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectNCI_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ProjectNCI_Id", "Name")
                        .IsUnique();

                    b.ToTable("Sample");
                });

            modelBuilder.Entity("A_D.Domain.Models.SampleRateRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectQOL_Id")
                        .HasColumnType("int");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<int>("SurveyGoal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Id", "SampleCount")
                        .IsUnique();

                    b.ToTable("SampleRateRepresentative");
                });

            modelBuilder.Entity("A_D.Domain.Models.SampleRateResident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectQOL_Id")
                        .HasColumnType("int");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<int>("SurveyGoal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectQOL_Id", "SampleCount")
                        .IsUnique();

                    b.ToTable("SampleRateResident");
                });

            modelBuilder.Entity("A_D.Domain.Models.Sample_ResultCategoryNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResultCategoryNCI_Id")
                        .HasColumnType("int");

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultCategoryNCI_Id");

                    b.HasIndex("Sample_Id", "ResultCategoryNCI_Id")
                        .IsUnique();

                    b.ToTable("Sample_ResultCategoryNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.SeparationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SeparationReason");
                });

            modelBuilder.Entity("A_D.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("State");
                });

            modelBuilder.Entity("A_D.Domain.Models.StatusLogNCI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Consumer_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<string>("InterviewNumber")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("InterviewTime")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<bool>("LastResult")
                        .HasColumnType("bit");

                    b.Property<int>("RefusalReasonNCI_Id")
                        .HasColumnType("int");

                    b.Property<string>("RefusalReasonOther")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ResultCategoryNCI_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("RefusalReasonNCI_Id");

                    b.HasIndex("ResultCategoryNCI_Id");

                    b.ToTable("StatusLogNCI");
                });

            modelBuilder.Entity("A_D.Domain.Models.SurveyQOL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdmitDay")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("AdmitMonth")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("AdmitYear")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Assisted")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AssistedBy")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Consent")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<bool>("Exclude")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("IncompleteCode_Id")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("InterviewNumber")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("InterviewTime")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("Interviewer_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProjectQOL_Facility_Id")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RID")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<int>("ResultCodeQOLIncomplete_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TooManyNA")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IncompleteCode_Id");

                    b.HasIndex("Interviewer_Id");

                    b.HasIndex("ProjectQOL_Facility_Id");

                    b.ToTable("SurveyQOL");
                });

            modelBuilder.Entity("A_D.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WinUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Initials")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("WinUserId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("A_D.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("A_D.Domain.Models.VisitCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VisitCode");
                });

            modelBuilder.Entity("A_D.Domain.PayRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("MilesMaximum")
                        .HasColumnType("int");

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.Property<string>("SourceCreate")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SourceModify")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Sample_Id", "Amount")
                        .IsUnique();

                    b.HasIndex("Sample_Id", "MilesMaximum")
                        .IsUnique();

                    b.ToTable("PayRate");
                });

            modelBuilder.Entity("A_D.Domain.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Recommendation");
                });

            modelBuilder.Entity("A_D.Domain.SampleAgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleAgeGroup");
                });

            modelBuilder.Entity("A_D.Domain.SampleAgeGroupMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleAgeGroup_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleAgeGroup_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleAgeGroup_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleAgeGroup_Id_Standardized");

                    b.ToTable("SampleAgeGroupMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleAgency");
                });

            modelBuilder.Entity("A_D.Domain.SampleAgencyMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleAgency_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleAgency_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleAgency_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleAgency_Id_Standardized");

                    b.ToTable("SampleAgencyMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleCCO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleCCO");
                });

            modelBuilder.Entity("A_D.Domain.SampleCCOMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleCCO_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleCCO_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleCCO_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleCCO_Id_Standardized");

                    b.ToTable("SampleCCOMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleEthnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleEthnicity");
                });

            modelBuilder.Entity("A_D.Domain.SampleEthnicityMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleEthnicity_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleEthnicity_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleEthnicity_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleEthnicity_Id_Standardized");

                    b.ToTable("SampleEthnicityMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleGender");
                });

            modelBuilder.Entity("A_D.Domain.SampleGenderMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleGender_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleGender_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleGender_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleGender_Id_Standardized");

                    b.ToTable("SampleGenderMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleGeography");
                });

            modelBuilder.Entity("A_D.Domain.SampleGeographyMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleGeography_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleGeography_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleGeography_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleGeography_Id_Standardized");

                    b.ToTable("SampleGeographyMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleHomeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleHomeSetting");
                });

            modelBuilder.Entity("A_D.Domain.SampleHomeSettingMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleHomeSetting_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleHomeSetting_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleHomeSetting_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleHomeSetting_Id_Standardized");

                    b.ToTable("SampleHomeSettingMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleLanguage");
                });

            modelBuilder.Entity("A_D.Domain.SampleLanguageMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleLanguage_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleLanguage_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleLanguage_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleLanguage_Id_Standardized");

                    b.ToTable("SampleLanguageMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleProgram");
                });

            modelBuilder.Entity("A_D.Domain.SampleProgramMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SampleProgram_Id_Original")
                        .HasColumnType("int");

                    b.Property<int>("SampleProgram_Id_Standardized")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SampleProgram_Id_Original")
                        .IsUnique();

                    b.HasIndex("SampleProgram_Id_Standardized");

                    b.ToTable("SampleProgramMap");
                });

            modelBuilder.Entity("A_D.Domain.SampleRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sample_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Sample_Id");

                    b.ToTable("SampleRace");
                });

            modelBuilder.Entity("AD.Domain.SampleRaceMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleRace", "SampleRace_Original")
                        .WithOne("SampleRaceMap_Original")
                        .HasForeignKey("AD.Domain.SampleRaceMap", "SampleRace_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleRace", "SampleRace_Standardized")
                        .WithMany("SampleRaceMaps_Standardized")
                        .HasForeignKey("SampleRace_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Incentive", b =>
                {
                    b.HasOne("A_D.Domain.Models.Sample", "Sample")
                        .WithMany("Incentives")
                        .HasForeignKey("Sample_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Assignment", b =>
                {
                    b.HasOne("A_D.Domain.Models.Consumer", "Consumer")
                        .WithOne("Assignment")
                        .HasForeignKey("A_D.Domain.Models.Assignment", "Consumer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("Assignments")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "PeerInterviewer")
                        .WithMany("PeerAssignments")
                        .HasForeignKey("Interviewer_Id_Peer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.Census", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("Censuses")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.RepresentativeSurveyBatch", "RepresentativeSurveyBatch")
                        .WithMany("Censuses")
                        .HasForeignKey("RepresentativeSurveyBatch_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.RepresentativeSurveyMethod", "RepresentativeSurveyMethod")
                        .WithMany("Censuses")
                        .HasForeignKey("RepresentativeSurveyMethod_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.State", "StateRepresentative")
                        .WithMany("Censuses")
                        .HasForeignKey("State_Id_Representative")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Consumer", b =>
                {
                    b.HasOne("A_D.Domain.SampleAgeGroup", "SampleAgeGroup")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleAgeGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleAgency", "SampleAgency")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleAgency_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleCCO", "SampleCCO")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleCCO_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleEthnicity", "SampleEthnicity")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleEthnicity_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleGender", "SampleGender")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleGender_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleGeography", "SampleGeography")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleGeography_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleHomeSetting", "SampleHomeSetting")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleHomeSetting_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleLanguage", "SampleLanguage")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleLanguage_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleProgram", "SampleProgram")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleProgram_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.SampleRace", "SampleRace")
                        .WithMany("Consumers")
                        .HasForeignKey("SampleRace_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.State", "StateMailing")
                        .WithMany("ConsumersMailing")
                        .HasForeignKey("State_Id_Mailing")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.State", "StatePhysical")
                        .WithMany("ConsumersPhysical")
                        .HasForeignKey("State_Id_Physical")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerContact", b =>
                {
                    b.HasOne("A_D.Domain.Models.Consumer", "Consumer")
                        .WithMany("ConsumerContacts")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.State", "State")
                        .WithMany("ConsumerContacts")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerGuardian", b =>
                {
                    b.HasOne("A_D.Domain.Models.Consumer", "Consumer")
                        .WithOne("ConsumerGuardian")
                        .HasForeignKey("A_D.Domain.Models.ConsumerGuardian", "Consumer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.State", "State")
                        .WithMany("ConsumerGuardians")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.ConsumerNote", b =>
                {
                    b.HasOne("A_D.Domain.Models.Consumer", "Consumer")
                        .WithMany("ConsumerNotes")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("ConsumerNotes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.County", b =>
                {
                    b.HasOne("A_D.Domain.Models.State", "State")
                        .WithMany("Counties")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.DateConflict", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("DateConflicts")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Device", b =>
                {
                    b.HasOne("A_D.Domain.Models.DeviceModel", "DeviceModel")
                        .WithOne("Device")
                        .HasForeignKey("A_D.Domain.Models.Device", "DeviceModel_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.DeviceNfieldVersion", "DeviceNfieldVersion")
                        .WithOne("Device")
                        .HasForeignKey("A_D.Domain.Models.Device", "DeviceNfieldVersion_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.DeviceOS", "DeviceOS")
                        .WithOne("Device")
                        .HasForeignKey("A_D.Domain.Models.Device", "DeviceOS_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceDeployment", b =>
                {
                    b.HasOne("A_D.Domain.Models.Device", "Device")
                        .WithMany("DeviceDeployments")
                        .HasForeignKey("Device_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("DeviceDeployments")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("DeviceDeployments")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.DeviceNote", b =>
                {
                    b.HasOne("A_D.Domain.Models.Device", "Device")
                        .WithMany("DeviceNotes")
                        .HasForeignKey("Device_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("DeviceNotes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Facility", b =>
                {
                    b.HasOne("A_D.Domain.Models.County", "County")
                        .WithMany("Facilities")
                        .HasForeignKey("County_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityConflict", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("FacilityConflicts")
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("FacilityConflicts")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityContact", b =>
                {
                    b.HasOne("A_D.Domain.Models.Facility", "Facility")
                        .WithMany("FacilityContacts")
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityDistance", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("FacilityDistances")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("FacilityDistances")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.FacilityNote", b =>
                {
                    b.HasOne("A_D.Domain.FacilityNoteTheme", "FacilityNoteTheme")
                        .WithMany("FacilityNotes")
                        .HasForeignKey("FacilityNoteTheme_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Facility", "Facility")
                        .WithMany("FacilityNotes")
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("FacilityNotes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Interviewer", b =>
                {
                    b.HasOne("A_D.Domain.Recommendation", "Recommendation")
                        .WithMany("Interviewers")
                        .HasForeignKey("Recommendation_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.State", "State")
                        .WithMany("Interviewers")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.InterviewerConflict", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "InterviewerA")
                        .WithMany("InterviewerAConflicts")
                        .HasForeignKey("Interviewer_Id_A")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "InterviewerB")
                        .WithMany("InterviewerBConflicts")
                        .HasForeignKey("Interviewer_Id_B")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("InterviewerConflicts")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.InterviewerNote", b =>
                {
                    b.HasOne("A_D.Domain.InterviewerNoteTheme", "InterviewerNoteTheme")
                        .WithMany("InterviewerNotes")
                        .HasForeignKey("InterviewerNoteTheme_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("InterviewerNotes")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("InterviewerNotes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Interviewer_Language", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("Interviewers_Languages")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Language", "Language")
                        .WithMany("Interviewers_Languages")
                        .HasForeignKey("Language_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.NotInterviewedQOL", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("NotInterviewedsQOL")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ResultCodeQOLNotInterviewed", "ResultCodeQOLNotInterviewed")
                        .WithMany("NotInterviewedsQOL")
                        .HasForeignKey("NotInterviewedCode_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("NotInterviewedsQOL")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.PSA", b =>
                {
                    b.HasOne("A_D.Domain.Models.PSARegion", "PSARegion")
                        .WithMany("PSAs")
                        .HasForeignKey("PSARegion_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.PSARegion", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL", "ProjectQOL")
                        .WithMany("PSARegions")
                        .HasForeignKey("ProjectQOL_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Project", b =>
                {
                    b.HasOne("A_D.Domain.Models.InterviewerEmployer", "InterviewerEmployer")
                        .WithMany("Projects")
                        .HasForeignKey("InterviewerEmployer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.State", "State")
                        .WithMany("Projects")
                        .HasForeignKey("State_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectNCI", b =>
                {
                    b.HasOne("A_D.Domain.Models.NotifyingParty", "NotifyingParty")
                        .WithMany("ProjectsNCI")
                        .HasForeignKey("NotifyingParty_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.Project", "Project")
                        .WithOne("ProjectNCI")
                        .HasForeignKey("A_D.Domain.Models.ProjectNCI", "Project_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL", b =>
                {
                    b.HasOne("A_D.Domain.Models.Project", "Project")
                        .WithOne("ProjectQOL")
                        .HasForeignKey("A_D.Domain.Models.ProjectQOL", "Project_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_Facility", b =>
                {
                    b.HasOne("A_D.Domain.Models.DocumentFormat", "DocumentFormat_Representative")
                        .WithMany("ProjectsQOL_FacilitiesRepresentative")
                        .HasForeignKey("DocumentFormat_Id_Representative")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.DocumentFormat", "DocumentFormat_Resident")
                        .WithMany("ProjectsQOL_FacilitiesResident")
                        .HasForeignKey("DocumentFormat_Id_Resident")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Facility", "Facility")
                        .WithMany("ProjectsQOL_Facilities")
                        .HasForeignKey("Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.PSA", "PSA")
                        .WithMany("ProjectsQOL_Facilities")
                        .HasForeignKey("PSA_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL", "ProjectQOL")
                        .WithMany("ProjectsQOL_Facilities")
                        .HasForeignKey("ProjectQOL_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.RepresentativeListStatus", "RepresentativeListStatus")
                        .WithMany("ProjectsQOL_Facilities")
                        .HasForeignKey("RepresentativeListStatus_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ReturnVisitReason", "ReturnVisitReason")
                        .WithMany("ProjectsQOL_Facilities")
                        .HasForeignKey("ReturnVisitReason_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilityLink", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_FacilityA")
                        .WithMany("ProjectQOL_FacilityLinksA")
                        .HasForeignKey("ProjectQOL_Facility_Id_A")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_FacilityB")
                        .WithMany("ProjectQOL_FacilityLinksB")
                        .HasForeignKey("ProjectQOL_Facility_Id_B")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilityReschedule", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("ProjectQOL_FacilityReschedules")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.RescheduleReason", "RescheduleReason")
                        .WithMany("ProjectQOL_FacilityReschedules")
                        .HasForeignKey("RescheduleReason_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilitySchedule", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("ProjectQOL_FacilitySchedules")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.VisitCode", "VisitCode")
                        .WithMany("ProjectQOL_FacilitySchedules")
                        .HasForeignKey("VisitCode_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.ProjectQOL_FacilitySchedule_Interviewer", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("ProjectQOL_FacilitySchedule_Interviewers")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_FacilitySchedule", "ProjectQOL_FacilitySchedule")
                        .WithMany("ProjectQOL_FacilitySchedule_Interviewers")
                        .HasForeignKey("ProjectQOL_FacilitySchedule_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_Interviewer", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("Projects_Interviewers")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "PeerInterviewer")
                        .WithMany("Projects_PeerInterviewers")
                        .HasForeignKey("Interviewer_Id_Peer")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.Interviewer", "QAMInterviewer")
                        .WithMany("Projects_QAMInterviewers")
                        .HasForeignKey("Interviewer_Id_QAM")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.PSA", "PSA")
                        .WithMany("Projects_Interviewers")
                        .HasForeignKey("PSA_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.Project", "Project")
                        .WithMany("Projects_Interviewers")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Recommendation", "Recommendation")
                        .WithMany("Projects_Interviewers")
                        .HasForeignKey("Recommendation_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.SeparationReason", "SeparationReason")
                        .WithMany("Projects_Interviewers")
                        .HasForeignKey("SeparationReason_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_Language", b =>
                {
                    b.HasOne("A_D.Domain.Models.Language", "Language")
                        .WithMany("Projects_Languages")
                        .HasForeignKey("Language_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Project", "Project")
                        .WithMany("Projects_Languages")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Project_User_UserRole", b =>
                {
                    b.HasOne("A_D.Domain.Models.Project", "Project")
                        .WithMany("Projects_Users_UserRoles")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.UserRole", "UserRole")
                        .WithMany("Projects_Users_UserRoles")
                        .HasForeignKey("UserRole_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.User", "User")
                        .WithMany("Projects_Users_UserRoles")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.RepresentativeSurveyBatch", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL", "ProjectQOL")
                        .WithMany("RepresentativeSurveyBatches")
                        .HasForeignKey("ProjectQOL_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.RestartQOL", b =>
                {
                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("RestartsQOL")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("RestartsQOL")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ResultCodeQOLIncomplete", "ResultCodeQOLIncomplete")
                        .WithMany("RestartsQOL")
                        .HasForeignKey("ResultCodeQOLIncomplete_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.ResultCodeQOLNotInterviewed", null)
                        .WithMany("RestartsQOL")
                        .HasForeignKey("ResultCodeQOLNotInterviewedId");
                });

            modelBuilder.Entity("A_D.Domain.Models.ResultNCI", b =>
                {
                    b.HasOne("A_D.Domain.Models.ResultCategoryNCI", "ResultCategoryNCI")
                        .WithMany("ResultsNCI")
                        .HasForeignKey("ResultCategoryNCI_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Sample", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectNCI", "ProjectNCI")
                        .WithMany("Samples")
                        .HasForeignKey("ProjectNCI_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.SampleRateRepresentative", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL", "ProjectQOL")
                        .WithMany("SampleRatesRepresentative")
                        .HasForeignKey("ProjectQOL_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.SampleRateResident", b =>
                {
                    b.HasOne("A_D.Domain.Models.ProjectQOL", "ProjectQOL")
                        .WithMany("SampleRatesResident")
                        .HasForeignKey("ProjectQOL_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.Sample_ResultCategoryNCI", b =>
                {
                    b.HasOne("A_D.Domain.Models.ResultCategoryNCI", "ResultCategoryNCI")
                        .WithMany("Samples_ResultCategoriesNCI")
                        .HasForeignKey("ResultCategoryNCI_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Sample", "Sample")
                        .WithMany("Samples_ResultCategoriesNCI")
                        .HasForeignKey("Sample_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.StatusLogNCI", b =>
                {
                    b.HasOne("A_D.Domain.Models.Consumer", "Consumer")
                        .WithMany("StatusLogsNCI")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("StatusLogsNCI")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.RefusalReasonNCI", "RefusalReasonNCI")
                        .WithMany("StatusLogsNCI")
                        .HasForeignKey("RefusalReasonNCI_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ResultCategoryNCI", "ResultCategoryNCI")
                        .WithMany("StatusLogsNCI")
                        .HasForeignKey("ResultCategoryNCI_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.Models.SurveyQOL", b =>
                {
                    b.HasOne("A_D.Domain.Models.ResultCodeQOLIncomplete", "ResultCodeQOLIncomplete")
                        .WithMany("SurveysQOL")
                        .HasForeignKey("IncompleteCode_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("A_D.Domain.Models.Interviewer", "Interviewer")
                        .WithMany("SurveysQOL")
                        .HasForeignKey("Interviewer_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.Models.ProjectQOL_Facility", "ProjectQOL_Facility")
                        .WithMany("SurveysQOL")
                        .HasForeignKey("ProjectQOL_Facility_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.PayRate", b =>
                {
                    b.HasOne("A_D.Domain.Models.Sample", "Sample")
                        .WithMany("PayRates")
                        .HasForeignKey("Sample_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleAgeGroupMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleAgeGroup", "SampleAgeGroup_Original")
                        .WithOne("SampleAgeGroupMap_Original")
                        .HasForeignKey("A_D.Domain.SampleAgeGroupMap", "SampleAgeGroup_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleAgeGroup", "SampleAgeGroup_Standardized")
                        .WithMany("SampleAgeGroupMaps_Standardized")
                        .HasForeignKey("SampleAgeGroup_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleAgencyMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleAgency", "SampleAgency_Original")
                        .WithOne("SampleAgencyMap_Original")
                        .HasForeignKey("A_D.Domain.SampleAgencyMap", "SampleAgency_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleAgency", "SampleAgency_Standardized")
                        .WithMany("SampleAgencyMaps_Standardized")
                        .HasForeignKey("SampleAgency_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleCCOMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleCCO", "SampleCCO_Original")
                        .WithOne("SampleCCOMap_Original")
                        .HasForeignKey("A_D.Domain.SampleCCOMap", "SampleCCO_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleCCO", "SampleCCO_Standardized")
                        .WithMany("SampleCCOMaps_Standardized")
                        .HasForeignKey("SampleCCO_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleEthnicityMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleEthnicity", "SampleEthnicity_Original")
                        .WithOne("SampleEthnicityMap_Original")
                        .HasForeignKey("A_D.Domain.SampleEthnicityMap", "SampleEthnicity_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleEthnicity", "SampleEthnicity_Standardized")
                        .WithMany("SampleEthnicityMaps_Standardized")
                        .HasForeignKey("SampleEthnicity_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleGenderMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleGender", "SampleGender_Original")
                        .WithOne("SampleGenderMap_Original")
                        .HasForeignKey("A_D.Domain.SampleGenderMap", "SampleGender_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleGender", "SampleGender_Standardized")
                        .WithMany("SampleGenderMaps_Standardized")
                        .HasForeignKey("SampleGender_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleGeographyMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleGeography", "SampleGeography_Original")
                        .WithOne("SampleGeographyMap_Original")
                        .HasForeignKey("A_D.Domain.SampleGeographyMap", "SampleGeography_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleGeography", "SampleGeography_Standardized")
                        .WithMany("SampleGeographyMaps_Standardized")
                        .HasForeignKey("SampleGeography_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleHomeSettingMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleHomeSetting", "SampleHomeSetting_Original")
                        .WithOne("SampleHomeSettingMap_Original")
                        .HasForeignKey("A_D.Domain.SampleHomeSettingMap", "SampleHomeSetting_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleHomeSetting", "SampleHomeSetting_Standardized")
                        .WithMany("SampleHomeSettingMaps_Standardized")
                        .HasForeignKey("SampleHomeSetting_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleLanguageMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleLanguage", "SampleLanguage_Original")
                        .WithOne("SampleLanguageMap_Original")
                        .HasForeignKey("A_D.Domain.SampleLanguageMap", "SampleLanguage_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleLanguage", "SampleLanguage_Standardized")
                        .WithMany("SampleLanguageMaps_Standardized")
                        .HasForeignKey("SampleLanguage_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("A_D.Domain.SampleProgramMap", b =>
                {
                    b.HasOne("A_D.Domain.SampleProgram", "SampleProgram_Original")
                        .WithOne("SampleProgramMap_Original")
                        .HasForeignKey("A_D.Domain.SampleProgramMap", "SampleProgram_Id_Original")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("A_D.Domain.SampleProgram", "SampleProgram_Standardized")
                        .WithMany("SampleProgramMaps_Standardized")
                        .HasForeignKey("SampleProgram_Id_Standardized")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
